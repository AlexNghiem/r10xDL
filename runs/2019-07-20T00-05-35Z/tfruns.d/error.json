{
  "message": "InvalidArgumentError: Matrix size-incompatible: In[0]: [128,1], In[1]: [128,1]\n\t [[{{node metrics_2/HLA_DR_correlation/MatMul}}]]\n\nDetailed traceback: \n  File \"/app/easybuild/software/TensorFlow/1.13.1-foss-2016b-Python-3.6.6/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 880, in fit\n    validation_steps=validation_steps)\n  File \"/app/easybuild/software/TensorFlow/1.13.1-foss-2016b-Python-3.6.6/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py\", line 329, in model_iteration\n    batch_outs = f(ins_batch)\n  File \"/app/easybuild/software/TensorFlow/1.13.1-foss-2016b-Python-3.6.6/lib/python3.6/site-packages/tensorflow/python/keras/backend.py\", line 3076, in __call__\n    run_metadata=self.run_metadata)\n  File \"/app/easybuild/software/TensorFlow/1.13.1-foss-2016b-Python-3.6.6/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1439, in __call__\n    run_metadata_ptr)\n  File \"/app/easybuild/software/TensorFlow/1.13.1-foss-2016b-Python-3.6.6/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 528, in __exit__\n    c_api.TF_GetCode(self.status.status))\n",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) {\n        result <- py_to_r(result)\n        if (is.null(result)) \n            invisible(result)\n        else result\n    }\n    else {\n        result\n    }\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 128L, epochs = 50L, \n    verbose = 0L, callbacks = list(<environment>, <environment>, \n        <environment>), validation_split = 0.2, shuffle = TRUE, \n    class_weight = NULL, sample_weight = NULL, initial_epoch = 0L, \n    x = <environment>, y = list(<environment>, <environment>, \n        <environment>, <environment>, <environment>, <environment>, \n        <environment>, <environment>, <environment>, <environment>, \n        <environment>, <environment>, <environment>, <environment>))", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., x = trainingData, y = lapply(1:dim(trainingLabels)[2], \n    function(x) {\n        trainingLabels[, x]\n    }), batch_size = FLAGS$batch_size, epochs = FLAGS$epochs, \n    validation_split = 0.2, verbose = 0, callbacks = list(print_dot_callback))", "fit(., x = trainingData, y = lapply(1:dim(trainingLabels)[2], \n    function(x) {\n        trainingLabels[, x]\n    }), batch_size = FLAGS$batch_size, epochs = FLAGS$epochs, \n    validation_split = 0.2, verbose = 0, callbacks = list(print_dot_callback))", "function_list[[k]](value)", "withVisible(function_list[[k]](value))", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "model %>% fit(x = trainingData, y = lapply(1:dim(trainingLabels)[2], \n    function(x) {\n        trainingLabels[, x]\n    }), batch_size = FLAGS$batch_size, epochs = FLAGS$epochs, \n    validation_split = 0.2, verbose = 0, callbacks = list(print_dot_callback))", "eval(ei, envir)", "eval(ei, envir)", "training_run(\"code/Benchmarking/1BuildBenchmark.R\")"]
}
